@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model MVC.Models.ViewModels.VarlıklarimVM

@section customScripts {
    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.25/css/jquery.dataTables.css">

    <script>
     
        var dataTable = $('#table').DataTable({

            language: {
                search: "Ara:",
                paginate: {
                    previous: "Önceki",
                    next: "Sonraki"
                },
                info: "_TOTAL_ kayıttan _START_ - _END_ arasındaki kayıtlar gösteriliyor",
                lengthMenu: "Sayfada _MENU_ kayıt göster"
            }
           
        });
    </script>
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Varlıklarım</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="~/css/varliklarim.css" rel="stylesheet" />
</head>
<body>
    <h2 style="text-align: center;">Varlıklarım</h2>
    <br />

    <div class="container-fluid">
        <div class="row">
            <div class="col-5">
                <div>
                    <canvas id="varliklarChart"></canvas>
                </div>
            </div>

            <div class="col-5">
                <table id="table"  class="container mt-5 my-table" style="max-width:700px" >
                    <thead>
                        <tr>
                            <th>Varlık İsmi</th>
                            <th>Değeri </th>
                            <th>Ortalama Maliyet</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Varliklar.Bakiyeler)
                        {
                            <tr>
                                <td>@item.DovizTipi </td>
                                <td>@item.ParaMiktari </td>
                                <td>N/A</td>
                            </tr>
                        }

                        @foreach (var item in Model.Varliklar.Coinler)
                        {
                            <tr id="coin_@item.Symbol">
                                <td>@item.Symbol</td>
                                <td id="value_@item.Symbol"></td>
                                <td>
                                    @if (Model.AverageCosts.Cost.TryGetValue(item.Symbol, out var averageCost))
                                    {
                                        @averageCost
                                    }
                                    else
                                    {
                                        @:N/A
                                    }
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>

            </div>
        </div>



    </div>






    <script>

        var coinData = @Html.Raw(Json.Serialize(Model.Varliklar.Coinler.ToDictionary(coin => coin.Symbol, coin => coin.Count)));

        var varliklarData = {
            labels: [],
            datasets: [{
                data: [],
                backgroundColor: [],
                borderWidth: 1
            }]
        };



        @foreach (var item in Model.Varliklar.Coinler)
        {
            @:varliklarData.labels.push("@item.Symbol");
            @:varliklarData.datasets[0].data.push(@item.Count);
            @:varliklarData.datasets[0].backgroundColor.push(randomColor());
        }

                var ctx = document.getElementById('varliklarChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'pie',
            data: varliklarData,
            options: {
                responsive: true,
                maintainAspectRatio: false
            }
        });

        function randomColor() {
            var r = Math.floor(Math.random() * 255);
            var g = Math.floor(Math.random() * 255);
            var b = Math.floor(Math.random() * 255);
            return 'rgba(' + r + ', ' + g + ', ' + b + ', 0.7)';
        }

        var socket = new WebSocket('wss://stream.binance.com:9443/ws/!ticker@arr');
        socket.onmessage = function (event) {
            var tickers = JSON.parse(event.data);
            tickers.forEach(function (ticker) {
                if (ticker.s in coinData) {
                    var coinCount = coinData[ticker.s];
                    var coinValue = ticker.c * coinCount;

                    // Tablo verisini güncelle
                    var valueElement = document.getElementById('value_' + ticker.s);
                    if (valueElement) {
                        valueElement.innerText = coinValue.toFixed(2);
                    }

                }
            });
        };

        socket.onerror = function (error) {
            console.log('WebSocket Error: ' + error);
        };
    </script>




</body>
</html>
